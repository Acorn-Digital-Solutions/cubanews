# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cubanews    # Add your cluster name here.
  GKE_ZONE: us-east1-b   # Add your cluster zone here.
  API_DEPLOYMENT_NAME: cubanews-rest-api-deployment # Add your deployment name here.
  IMAGE: cubanews-rest-api
  IMAGE_WEB: cubanews-web
  WEB_DEPLOYMENT_NAME: cubanews-web-deployment
  REGION: us-east1
  IMAGE_TAG: main

jobs:

  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: build
      - name: Setup and execute Gradle 'check' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check
      - name: Upload rest-api jar
        uses: actions/upload-artifact@v2
        with:
          name: app.jar
          path: rest-api/build/libs/*.jar

  build-web:
    name: React Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: npm ci, build and test
        run: |
          cd web-ui;
          npm ci
          CI=false npm run build --if-present
          pwd;
          ls;
      - name: Upload react app
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: web-ui/build
  
  push-rest-api:
      runs-on: ubuntu-latest
      permissions:
        packages: write
        contents: read
      needs: [build]
      steps:
        - uses: actions/checkout@v3

        - name: Download jar
          uses: actions/download-artifact@v2
          with:
            name: app.jar

        - name: Build image
          run: |-
            ls; cp rest-api-1.0.0-SNAPSHOT.jar rest-api/ ; ls rest-api;
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE;

            docker build \
              --tag "$IMAGE_ID:$IMAGE_TAG" \
              --build-arg GITHUB_SHA="$GITHUB_SHA" \
              --build-arg GITHUB_REF="$GITHUB_REF" \
              --build-arg JAR_FILE=rest-api-1.0.0-SNAPSHOT.jar \
              --build-arg AWS_ACCESS_KEY_ID_ARG=${{ secrets.AWS_ACCESS_KEY_ID }} \
              --build-arg AWS_SECRET_ACCESS_KEY_ARG=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              --build-arg SPRING_PROFILE_ARG=prod \
              rest-api/ ; 

        - name: Log in to registry
          # This is where you will update the personal access token to GITHUB_TOKEN
          run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

        - name: Push image
          run: |
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE          
            docker push $IMAGE_ID:$IMAGE_TAG
    
  push-web:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [build-web]
    steps:
      - uses: actions/checkout@v3
      - name: Download Webapp
        uses: actions/download-artifact@v2
        with:
          name: webapp
          path: web-ui/build/
      
      - name: Build image
        run: |-
          IMAGE_WEB_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_WEB;
          docker build --tag "$IMAGE_WEB_ID:$IMAGE_TAG" web-ui/
      
      - name: Log in to registry
        # This is where you will update the personal access token to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push Image
        run: |
          IMAGE_WEB_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_WEB;
          docker push $IMAGE_WEB_ID:$IMAGE_TAG

  # setup-build-publish-deploy:
  #   name: Setup, Build, Publish, and Deploy
  #   needs: [build, build-web]
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # Setup gcloud CLI
  #     - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
  #       with:
  #         service_account_key: ${{ secrets.GKE_SA_KEY }}
  #         project_id: ${{ secrets.GKE_PROJECT }}

  #     # Configure Docker to use the gcloud command-line tool as a credential
  #     # helper for authentication
  #     - run: |-
  #         gcloud --quiet auth configure-docker ${{env.REGION}}-docker.pkg.dev
  #     # Get the GKE credentials so we can deploy to the cluster
  #     - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
  #       with:
  #         cluster_name: ${{ env.GKE_CLUSTER }}
  #         location: ${{ env.GKE_ZONE }}
  #         credentials: ${{ secrets.GKE_SA_KEY }}

  #     - name: Download jar
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: app.jar

  #     - name: Download Webapp
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: webapp
  #         path: web-ui/build/

  #     - name: Display structure of downloaded files
  #       run: ls -R
  #       working-directory: web-ui/build/

  #     # Build the Docker image
  #     - name: Build
  #       run: |-
  #         ls; cp rest-api-1.0.0-SNAPSHOT.jar rest-api/ ; ls rest-api;
  #         docker build \
  #           --tag "$REGION-docker.pkg.dev/$PROJECT_ID/cubanews/$IMAGE:$GITHUB_SHA" \
  #           --build-arg GITHUB_SHA="$GITHUB_SHA" \
  #           --build-arg GITHUB_REF="$GITHUB_REF" \
  #           --build-arg JAR_FILE=rest-api-1.0.0-SNAPSHOT.jar \
  #           rest-api/ ;
  #         docker build \
  #           --tag "$REGION-docker.pkg.dev/$PROJECT_ID/cubanews/$IMAGE_WEB:$GITHUB_SHA" \
  #           web-ui/
  #     # Push the Docker image to Google Container Registry
  #     - name: Publish
  #       run: |-
  #         docker push "$REGION-docker.pkg.dev/$PROJECT_ID/cubanews/$IMAGE:$GITHUB_SHA";
  #         docker push "$REGION-docker.pkg.dev/$PROJECT_ID/cubanews/$IMAGE_WEB:$GITHUB_SHA"
  #     # Set up kustomize
  #     - name: Set up Kustomize
  #       run: |-
  #         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #         chmod u+x ./kustomize
  #     # Deploy the Docker image to the GKE cluster
  #     - name: Deploy Rest Api
  #       run: |-
  #         sed -i "s/IMAGE_VERSION/$GITHUB_SHA/" .k8/prod/api/deployment.yml
  #         cat .k8/prod/api/deployment.yml
  #         kubectl apply -f .k8/prod/api
  #         kubectl rollout restart deployment/$API_DEPLOYMENT_NAME
  #         kubectl rollout status deployment/$API_DEPLOYMENT_NAME
  #         kubectl get services -o wide
  #     - name: Deploy Web
  #       run: |-
  #         sed -i "s/IMAGE_VERSION/$GITHUB_SHA/" .k8/prod/web/deployment.yml
  #         cat .k8/prod/web/deployment.yml
  #         kubectl apply -f .k8/prod/web
  #         kubectl rollout restart deployment/$WEB_DEPLOYMENT_NAME
  #         kubectl rollout status deployment/$WEB_DEPLOYMENT_NAME
  #         kubectl get services -o wide
  #     - name: Deploy Ingress and CronJob
  #       run: |-
  #         kubectl apply -f .k8/prod/ingress.yml