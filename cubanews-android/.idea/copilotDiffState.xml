<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/acorn/cubanews/feed/FeedComposable.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/acorn/cubanews/feed/FeedComposable.kt" />
              <option name="originalContent" value="package com.acorn.cubanews.feed&#10;&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.browser.customtabs.CustomTabsIntent&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.snapshotFlow&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.core.net.toUri&#10;&#10;@Composable&#10;fun FeedComposable(feedViewModel: FeedViewModel) {&#10;    val feedItems by remember { feedViewModel.uiState }.collectAsState()&#10;    val listState = rememberLazyListState()&#10;&#10;    LaunchedEffect(listState) {&#10;        snapshotFlow { listState.layoutInfo.visibleItemsInfo.lastOrNull()?.index }&#10;            .collect { lastVisibleItemIndex -&gt;&#10;                if (lastVisibleItemIndex != null &amp;&amp; lastVisibleItemIndex &gt;= feedItems.size - 3) {&#10;                    feedViewModel.fetchNextFeedBatch()&#10;                }&#10;            }&#10;    }&#10;&#10;    LazyColumn(state = listState) {&#10;        // Trigger fetching the first batch when this composable is first composed&#10;        items(feedItems) { item -&gt;&#10;            FeedItemView(item)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FeedItemView(item: FeedItem) {&#10;    val context = LocalContext.current&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;            .padding(top = 8.dp)&#10;            .clickable {&#10;                val customTabsIntent = CustomTabsIntent.Builder().build()&#10;                customTabsIntent.launchUrl(context, item.url.toUri())&#10;            }&#10;    ) {&#10;        Image(&#10;            painter = painterResource(id = item.getImageName()), // replace with your asset filename&#10;            contentDescription = &quot;Icon&quot;,&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .padding(end = 8.dp)&#10;        )&#10;        Column {&#10;            Text(text = item.title, style = MaterialTheme.typography.titleMedium)&#10;            Text(&#10;                text = item.source.name,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = Color.Gray&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        }&#10;    }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp).padding(bottom = 8.dp)&#10;    ) {&#10;        item.content?.let {&#10;            Text(text = it, style = MaterialTheme.typography.bodyMedium)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.acorn.cubanews.feed&#10;&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.browser.customtabs.CustomTabsIntent&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.snapshotFlow&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.core.net.toUri&#10;&#10;@Composable&#10;fun FeedComposable(feedViewModel: FeedViewModel) {&#10;    val feedItems by remember { feedViewModel.uiState }.collectAsState()&#10;    val listState = rememberLazyListState()&#10;&#10;    LaunchedEffect(listState) {&#10;        snapshotFlow { listState.layoutInfo.visibleItemsInfo.lastOrNull()?.index }&#10;            .collect { lastVisibleItemIndex -&gt;&#10;                if (lastVisibleItemIndex != null &amp;&amp; lastVisibleItemIndex &gt;= feedItems.size - 3) {&#10;                    feedViewModel.fetchNextFeedBatch()&#10;                }&#10;            }&#10;    }&#10;&#10;    LazyColumn(state = listState) {&#10;        // Trigger fetching the first batch when this composable is first composed&#10;        items(feedItems) { item -&gt;&#10;            FeedItemView(item)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FeedItemView(item: FeedItem) {&#10;    val context = LocalContext.current&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp)&#10;            .clickable {&#10;                val customTabsIntent = CustomTabsIntent.Builder().build()&#10;                customTabsIntent.launchUrl(context, item.url.toUri())&#10;            },&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = item.getImageName()),&#10;                contentDescription = &quot;Thumbnail&quot;,&#10;                modifier = Modifier&#10;                    .size(64.dp)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;            )&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = item.title,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                // Article content/summary (if available)&#10;                val content = try {&#10;                    item.javaClass.getDeclaredField(&quot;content&quot;).get(item) as? String&#10;                } catch (e: Exception) {&#10;                    try { item.javaClass.getDeclaredField(&quot;description&quot;).get(item) as? String } catch (e: Exception) { null }&#10;                }&#10;                content?.let {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = it,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Color.DarkGray,&#10;                        maxLines = 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = item.source.name,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.Gray&#10;                    )&#10;                    val isoDate = try { item.javaClass.getDeclaredField(&quot;isoDate&quot;).get(item)?.toString() } catch (e: Exception) { null }&#10;                    isoDate?.let {&#10;                        Text(&#10;                            text = &quot; â€¢ $it&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.Gray&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;    Spacer(modifier = Modifier.height(4.dp))&#10;    HorizontalDivider(color = Color(0x11000000), thickness = 1.dp, modifier = Modifier.padding(horizontal = 24.dp))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>